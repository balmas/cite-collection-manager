import groovy.xml.MarkupBuilder
import org.apache.commons.io.FileUtils

import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.auth.oauth2.MemoryCredentialStore
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp
import com.google.api.client.extensions.jdo.auth.oauth2.JdoCredentialStore
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets
import com.google.api.client.http.GenericUrl
import com.google.api.client.http.HttpTransport
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.services.oauth2.Oauth2
import com.google.api.services.oauth2.model.Tokeninfo
import com.google.api.services.oauth2.model.Userinfo

import java.io.File
import java.io.IOException
import java.util.Arrays
import java.util.List
import javax.jdo.JDOHelper

StringWriter writer = new StringWriter()
MarkupBuilder home = new MarkupBuilder(writer)

if (CodeFlow.instance.secrets == null) {
  CodeFlow.instance.setSecrets(getClass().getClassLoader())
}

GenericUrl callback = new GenericUrl(request.getRequestURL().toString())
callback.setRawPath("/cite-collection-manager/oauth2callback")

String url = CodeFlow.instance.build().newAuthorizationUrl().setRedirectUri(callback.build()).build()
Credential credential = CodeFlow.instance.build().loadCredential('administrator')
String authorized = CodeFlow.instance.authorized() ? "unauthorized" : "authorized"

home.html {
    head {
        title("CITE Collection Manager")
        p('class' : "menu", "CITE Collections: home")
    }
    body {
        div(id : "header") 
        div {
            h1("CITE Collections interface to data in Google Fusion Tables")
            p("Supply your own home page here.")
            p(authorized)
            if( credential != null ) {
              p(credential.getExpiresInSeconds())
            }
            
            p {
              a (href : url, "Google Auth")
            }

            p {
                mkp.yield     "Quick README including "
                a(href : "README.md", "how to configure and run")
                mkp.yield " this service."
            }
            p {
                mkp.yield "License: "
                a(href : "gpl-3.0.txt","GPL 3")
            }
            p {
                mkp.yield "Page of forms to test the "
                a (href : "testPage", "CITE Collections API")
            }
        }
    }
}

println writer.toString()

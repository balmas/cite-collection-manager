package edu.harvard.chs.citecollectionmanager

import edu.harvard.chs.citecollectionmanager.CodeFlow
import edu.harvard.chs.citecollectionmanager.UserAuthorization

import com.google.api.client.http.HttpRequest
import com.google.api.client.http.HttpResponse
import com.google.api.client.http.HttpHeaders
import com.google.api.client.auth.oauth2.Credential
import com.google.api.services.fusiontables.Fusiontables
import com.google.api.services.fusiontables.Fusiontables.Table
import com.google.api.services.fusiontables.Fusiontables.Builder
import com.google.api.services.fusiontables.model.TableList
import com.google.api.services.fusiontables.model.Sqlresponse
import com.google.api.client.http.GenericUrl
import com.google.api.client.http.HttpTransport
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.services.oauth2.Oauth2
import com.google.api.services.oauth2.Oauth2.Builder
import com.google.api.services.oauth2.model.Tokeninfo
import com.google.api.services.oauth2.model.Userinfoplus
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder

import javax.servlet.http.HttpServletResponse

import groovy.xml.MarkupBuilder
StringWriter writer = new StringWriter()
MarkupBuilder home = new MarkupBuilder(writer)

String sql = request.getParameter("sql")
String user_access_token = request.getParameter("access_token")

if((user_access_token != null) && (!user_access_token.equals("null"))) {
  System.out.println("Proxying: " + sql)
  System.out.println(user_access_token)

  GoogleCredential google_credential = new GoogleCredential().setAccessToken(user_access_token)
  Oauth2 oauth2 = new Oauth2.Builder(CodeFlow.HTTP_TRANSPORT, CodeFlow.JSON_FACTORY, google_credential).build()
  Userinfoplus userinfo = oauth2.userinfo().get().execute()

  UserAuthorization user_authorization = new UserAuthorization(userinfo)

  if(user_authorization.authorized()) {
    Credential credential = CodeFlow.instance.build().loadCredential('administrator')

    Fusiontables fusiontables = new Fusiontables.Builder(CodeFlow.HTTP_TRANSPORT, CodeFlow.JSON_FACTORY, credential).build()
    Sqlresponse response = fusiontables.query().sql(sql).execute()

    println response.toPrettyString()
  }
  else {
    System.out.println("User blocked, aborting proxy")
    response.setStatus(HttpServletResponse.SC_FORBIDDEN)
  }
}
else {
  System.out.println("No access token, not proxying: " + sql)
  response.setStatus(HttpServletResponse.SC_FORBIDDEN)
}

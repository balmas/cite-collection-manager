import groovy.xml.MarkupBuilder
import org.apache.commons.io.FileUtils

import com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow
import com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest
import com.google.api.client.auth.oauth2.BearerToken
import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.auth.oauth2.MemoryCredentialStore
import com.google.api.client.auth.oauth2.TokenResponse
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp
import com.google.api.client.extensions.jdo.auth.oauth2.JdoCredentialStore
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets
import com.google.api.client.http.GenericUrl
import com.google.api.client.http.HttpTransport
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.services.oauth2.Oauth2
import com.google.api.services.oauth2.model.Tokeninfo
import com.google.api.services.oauth2.model.Userinfo

import java.io.File
import java.io.IOException
import java.util.Arrays
import java.util.List
import javax.jdo.JDOHelper

StringWriter writer = new StringWriter()
MarkupBuilder home = new MarkupBuilder(writer)

String code = request.getParameter("code")
GenericUrl url = new GenericUrl(request.getRequestURL().toString())
url.setRawPath("/cite-collection-manager/oauth2callback")
String uri = url.build()

File secrets_file = new File(getClass().getClassLoader().getResource("client_secrets.json").toURI())
String secrets = FileUtils.readFileToString(secrets_file, "UTF-8")

List<String> scopes = Arrays.asList("https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/fusiontables")
GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(new JacksonFactory(), getClass().getClassLoader().getResourceAsStream("client_secrets.json"))
// MemoryCredentialStore credentialStore = new MemoryCredentialStore()
GoogleAuthorizationCodeFlow codeFlow = new GoogleAuthorizationCodeFlow.Builder(new NetHttpTransport(), new JacksonFactory(), clientSecrets, scopes).setCredentialStore(Globals.credentialStore).setAccessType("offline").build()

TokenResponse token = codeFlow.newTokenRequest(code).setRedirectUri(uri).execute()
System.out.println(token.getTokenType())

codeFlow.createAndStoreCredential(token,"administrator")

String authorized = (codeFlow.loadCredential('administrator') == null) ? "unauthorized" : "authorized"
System.out.println(authorized)

response.sendRedirect("/cite-collection-manager/")

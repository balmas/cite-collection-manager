import groovy.xml.MarkupBuilder
import org.apache.commons.io.FileUtils

import com.google.api.services.oauth2.Oauth2
import com.google.api.services.oauth2.Oauth2.Builder
import com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow
import com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest
import com.google.api.client.auth.oauth2.BearerToken
import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.auth.oauth2.Credential.Builder
import com.google.api.client.auth.oauth2.MemoryCredentialStore
import com.google.api.client.auth.oauth2.TokenResponse
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp
import com.google.api.client.extensions.jdo.auth.oauth2.JdoCredentialStore
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder
import com.google.api.client.http.GenericUrl
import com.google.api.client.http.HttpTransport
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.services.oauth2.Oauth2
import com.google.api.services.oauth2.model.Tokeninfo
import com.google.api.services.oauth2.model.Userinfo

import java.io.File
import java.io.IOException
import java.util.Arrays
import java.util.List
import javax.jdo.JDOHelper

StringWriter writer = new StringWriter()
MarkupBuilder home = new MarkupBuilder(writer)

String code = request.getParameter("code")
String uri = request.getRequestURL().toString()

TokenResponse token = CodeFlow.instance.build().newTokenRequest(code).setRedirectUri(uri).execute()
System.out.println(token.getTokenType())

GoogleCredential credential = new GoogleCredential.Builder().setTransport(CodeFlow.HTTP_TRANSPORT).setJsonFactory(CodeFlow.JSON_FACTORY).setClientSecrets(CodeFlow.instance.secrets).build()
credential.setFromTokenResponse(token)
Oauth2 oauth2 = new Oauth2.Builder(CodeFlow.HTTP_TRANSPORT, CodeFlow.JSON_FACTORY, credential).build()

Userinfo userinfo = oauth2.userinfo().get().execute()
System.out.println(userinfo.getEmail())

if (userinfo.getEmail().equals("@administratorEmail@")) {
  CodeFlow.instance.build().createAndStoreCredential(token,"administrator")

  String authorized = (CodeFlow.instance.build().loadCredential('administrator') == null) ? "unauthorized" : "authorized"
  System.out.println(authorized)

  response.sendRedirect("/cite-collection-manager/")
}
else {
  println userinfo.getEmail() + " is not an authorized administrator."
}
